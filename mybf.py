# -*- coding: utf-8 -*-
"""180227_Assign4 Q2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fzj9EBfZeO0Reos1B9YEVSFeiRI5-smY
"""

import cv2
import numpy as np
import math


def bilateral_filter(img, spatial_variance, intensity_variance, kernel_size):
    (X, Y) = img.shape[0], img.shape[1]

    output = np.zeros(img.shape)

    gauss_kernel = np.zeros((kernel_size, kernel_size))
    for i in range(0, kernel_size):
        for j in range(0, kernel_size):
            gauss_kernel[i, j] = math.sqrt( abs(i - kernel_size // 2) ** 2 + abs(j - kernel_size // 2) ** 2)
            
    sigma = math.sqrt(spatial_variance)
    temp = 1 / (sigma * math.sqrt(2 * math.pi))
    gauss_kernel = temp * np.exp(-((gauss_kernel / sigma) ** 2) * 0.5)    


    for i in range(kernel_size // 2, X - kernel_size // 2):
        for j in range(kernel_size // 2, Y - kernel_size // 2):
 
          h = kernel_size // 2

          imgS = img[i - h : i + h + 1, j - h : j + h + 1]

          imgI = imgS - imgS[kernel_size // 2, kernel_size // 2]

          sigma = math.sqrt(intensity_variance)

          temp = 1 / (sigma * math.sqrt(2 * math.pi))

          imgIG = temp * np.exp(-((imgI / sigma) ** 2) * 0.5)

          weights = np.multiply(gauss_kernel, imgIG)

          vals = np.multiply(imgS, weights)

          val = np.sum(vals) / np.sum(weights)

          output[i, j] = val
    return output
 



def mybf_original(img, spatial_variance, intensity_variance, kernel_size):

  img_lab = cv2.cvtColor(img,cv2.COLOR_BGR2LAB)
  l,a,b = cv2.split(img_lab)
  img = l / 100.0
  img = img.astype("float32")
  img = bilateral_filter(img, spatial_variance, intensity_variance, kernel_size)
  img = img * 100
  img = np.uint8(img)

  out = cv2.merge((img,a,b))
  out = cv2.cvtColor(out,cv2.COLOR_LAB2BGR)

  return out

def my_BF(img, spatial_variance, intensity_variance, kernel_size):
  img=cv2.pyrDown(img)
  out=mybf_original(img, spatial_variance, intensity_variance, kernel_size)
  out = cv2.pyrUp(out)
  return out

spatial_variance=75
intensity_variance=4
kernel_size=11

img = cv2.imread("rome.jpg")
out1=mybf_original(img, spatial_variance, intensity_variance, kernel_size)
cv2.imwrite("rome_clean.jpg", out1)
out2=my_BF(img, spatial_variance, intensity_variance, kernel_size)

from skimage.metrics import structural_similarity as compare_ssim
(ssim_score, diff) = compare_ssim(out1, img, full=True, multichannel=True)
diff = (diff * 255).astype("uint8")
print("SSIM: {}".format(ssim_score))

def calculate_psnr(img1, img2):
  img1 = img1.astype(np.float64)
  img2 = img2.astype(np.float64)
  mse = np.mean((img1 - img2)*(img1 - img2))
  if mse != 0:
    return 20 * math.log10(255.0 / math.sqrt(mse))
  return float('inf')

psnr_score=calculate_psnr(img, out1)
print("PSNR: {}".format(psnr_score))

psnr_score=calculate_psnr(img, out2)
print("PSNR: {}".format(psnr_score))

from skimage.metrics import structural_similarity as compare_ssim

(ssim_score, diff) = compare_ssim(out1, out2, full=True, multichannel=True)
diff = (diff * 255).astype("uint8")
print("SSIM: {}".format(ssim_score))